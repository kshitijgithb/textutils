{"version":3,"sources":["logo.svg","components/Navbar.js","components/Textform.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","Navbar","props","React","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","aboutText","role","onClick","toggleMode","htmlFor","Textform","_useState","useState","_useState2","_slicedToArray","text","setText","style","color","heading","rows","value","onChange","event","console","log","target","backgroundColor","newText","toUpperCase","showAlert","toLowerCase","text1","slice","text2","length","document","getElementById","select","navigator","clipboard","writeText","split","join","defaultProps","Alert","alert","word","lower","charAt","capitalize","msg","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","Fragment","body","reportWebVitals","onPerfEntry","Function","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.6ac5f6c5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.06e73328.svg\";","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {Link} from 'react-router-dom'\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n    <div className=\"container-fluid\">\r\n      {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n      <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n      <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"/navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n          <li className=\"nav-item\">\r\n            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <a className=\"nav-link\" href=\"#\">{props.aboutText}</a>\r\n          </li>\r\n          {/* <li className=\"nav-item dropdown\">\r\n            <a className=\"nav-link dropdown-toggle\" href=\"/\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n              Dropdown\r\n            </a>\r\n            <ul className=\"dropdown-menu\">\r\n              <li><a className=\"dropdown-item\" href=\"/\">Action</a></li>\r\n              <li><a className=\"dropdown-item\" href=\"/\">Another action</a></li>\r\n              <li><hr className=\"dropdown-divider\"/></li>\r\n              <li><a className=\"dropdown-item\" href=\"/\">Something else here</a></li>\r\n            </ul>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <a className=\"nav-link disabled\">Disabled</a>\r\n          </li> */}\r\n        </ul>\r\n        <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n  <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onClick={props.toggleMode}/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n</div>\r\n        {/* <form className=\"d-flex\" role=\"search\">\r\n          <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n          <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n        </form> */}\r\n      </div>\r\n    </div>\r\n  </nav>\r\n  )\r\n}\r\nNavbar.propTypes={title:PropTypes.string.isRequired,\r\n                   aboutText:PropTypes.string.isRequired};\r\n\r\nNavbar.defaultProps={\r\n    title:'set tiitle here',\r\n    aboutText:'About'\r\n}                   ","import React,{useState} from 'react'//usestate is hook\r\nexport default function Textform(props) {\r\n    const handleUpClick=()=>{\r\n        console.log(\"Uppercase was clicked\");\r\n        let newText=text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"converted to uppercase\",\"success\")\r\n    }\r\n    const handleLoClick=()=>{\r\n      console.log(\"Lowercase was clicked\");\r\n      let newText=text.toLowerCase();\r\n      setText(newText);\r\n      props.showAlert(\"converted to lowercase\",\"success\")\r\n  }\r\n    const handleCaClick=()=>{\r\n     // console.log(\"Lowercase was clicked\");\r\n     let text1=text.slice(0,1);\r\n     let text2=text.slice(1,text.length);\r\n      let newText=text1.toUpperCase()+text2.toLowerCase();\r\n      setText(newText);\r\n      props.showAlert(\"Text Capitalized!\",\"success\")\r\n  }\r\n    const handleClearClick=()=>{\r\n     // console.log(\"Lowercase was clicked\");\r\n    //  let text1=text.slice(0,1);\r\n    //  let text2=text.slice(1,text.length);\r\n      let newText=\"\";\r\n      setText(newText);\r\n      props.showAlert(\"Text Cleared!\",\"success\")\r\n  }\r\n    const handleCopy=()=>{\r\n     // console.log(\"Lowercase was clicked\");\r\n    //  let text1=text.slice(0,1);\r\n    //  let text2=text.slice(1,text.length);\r\n    var text=document.getElementById(\"myBox\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n    props.showAlert(\"copied to clipboard\",\"success\")\r\n  }\r\n    const handleExtraSpaces=()=>{\r\n    var newText=text.split(/[ ]+/);\r\n      setText(newText.join(\" \"))\r\n      props.showAlert(\"Extra Spaces removed!\",\"success\")\r\n  }\r\n\r\n    const handleOnChange=(event)=>{\r\n        console.log(\"On change\");\r\n        setText(event.target.value);\r\n    }\r\n    const [text, setText] = useState('Enter text here');\r\n    //text=\"new text\";//wrong way to change the state\r\n  //  setText(\"new text\")//correct way to change the state\r\n  return (\r\n    <div className='container' style={{color:props.mode==='dark'?'white':'black'}}>\r\n        <h1>{props.heading}</h1>\r\n<div className=\"mb-3\">\r\n{/* <label for=\"myBox\" class=\"form-label\">Example textarea</label> */}\r\n  <textarea className=\"form-control\" id=\"myBox\" rows=\"8\" value={text} onChange={handleOnChange} style={{backgroundColor:props.mode==='dark'?'grey':'white',color:props.mode==='dark'?'white':'grey'}}></textarea>\r\n  {/* // 2 curly braces are use one for jacvascript and other is for objects */}\r\n</div>\r\n<div className=\"btn btn-primary mx-2\" onClick={handleUpClick}> Convert to uppercase </div>\r\n<div className=\"btn btn-primary mx-2\" onClick={handleLoClick}> Convert to lowercase </div>\r\n<div className=\"btn btn-primary mx-2\" onClick={handleCaClick}> Capitalize </div>\r\n<div className=\"btn btn-primary mx-2\" onClick={handleClearClick}> Clear </div>\r\n<div className=\"btn btn-primary mx-2\" onClick={handleCopy}> Copy </div>\r\n<div className=\"btn btn-primary mx-2\" onClick={handleExtraSpaces}> Remove Extra Spaces </div>\r\n<div className=\"container my-3\">\r\n  <h1>your text summary</h1>\r\n  <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n  <p>{0.008*text.split(\" \").length} minutes read</p>\r\n  <h2>Preview</h2>\r\n  <p>{text.length>0?text:\"Enter Something in textbox above to preview it here\"}</p>\r\n</div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n//rfc is the shortcut\r\n function Alert(props) {\r\n    const capitalize=(word)=>{\r\n        const lower=word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase()+lower.slice(1);\r\n    }\r\n  return (\r\n props.alert&& <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n  {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n</div>\r\n  )\r\n}\r\nexport default Alert","import logo from './logo.svg';\nimport './App.css';\nimport Navbar from './components/Navbar.js';\nimport Textform from './components/Textform.js';\nimport Alert from './components/Alert.js';\nimport React ,{useState} from 'react';\nimport About from './components/About';\n// import {\n//   BrowserRouter as Router,\n//   Route,\n//   Routes,\n// } from \"react-router-dom\";\nfunction App() {\n  const[mode,setMode]=useState('light');//Whether dark mode is enabled or not\n  const[alert,setAlert]=useState(null); //alert is an object\n  const showAlert=(message,type)=>{\n    setAlert({\n      msg:message,\n      type:type\n    })\n    setTimeout(()=>{\n      setAlert(null);\n    },2000);\n  }\n  const toggleMode=()=>{\n     if(mode==='light'){\n     setMode('dark')\n     document.body.style.backgroundColor='#2B3467';\n     showAlert(\"Dark mode is enabled\",\"success\");\n     }\n     else{\n      setMode('light');\n      document.body.style.backgroundColor='white';\n      showAlert(\"Light mode is enabled\",\"success\");\n     }\n  }\n  return (\n    <>\n{/* <Router> */}\n  <Navbar title=\"Textutils\" aboutText=\"About\" mode={mode} toggleMode={toggleMode}/>\n{/* <Navbar/> */}\n<Alert alert={alert}/>\n  {/* <Routes> */}\n{/* <Route path=\"/about\" element={<About/>}/> */}\n{/* <div className=\"container my-3\"> */}\n<Textform heading=\"Enter the text to analyse below\" mode={mode} showAlert={showAlert}/>\n{/* <About/> */}\n{/* </div> */}\n{/* <Route path=\"/\" element={<Textform heading=\"Enter the text to analyse below\" mode={mode} showAlert={showAlert}/>}/> */}\n{/* </Routes> */}\n{/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}